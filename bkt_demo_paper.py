#%% IMPORT LIBRARY & MODULEimport numpy as npimport pandas as pdimport matplotlib.pyplot as pltfrom module_em import multi_sequence_trainingfrom module_bkt_model import BKTModel# EDAdf = pd.read_csv('BKT_for_publication/obs_data.csv')df.head()df.shapedf.info()raw_score = df.groupby('student_ID')['score'].mean() * 10fig = plt.figure(dpi=200)raw_score.plot(kind='hist')plt.xlabel('Student score (out of 10)')plt.show()df_item = pd.read_csv('BKT_for_publication/Item-Bank_L6-02.K6.1_01 Số nguyên âm và tập hợp các số nguyên. Thứ tự trong tập hợp các số nguyên.csv')df = df[        (~df['student_ID'].isin(raw_score[raw_score < 3].index))         & (df['item_ID'].isin(df_item[df_item['muc_do']=='M1']['ch_id'].unique()))        ]student_list = df['student_ID'].unique()#%% EXP 2: BKT FOR GROUP OF STUDENT(pi, A, B,  log_likelihood, epoch ) = multi_sequence_training(df=df, ll_eps=1e-7, max_epoch = 200)# Result# π: initial probability of hidden states# π =  Unlearn [ 1 ] #      Learn   [ 0 ]     # A: transition probability matrix#                 Unlearn           Learn# A = Unlearn [  0.84229209     0.15770791  ]#     Learn   [  0.0            1.0         ]# B: emission probability matrix#                 Incorrect       Correct# B = Unlearn [  0.15373074,    0.917808    ]#     Learn   [  0.64264715,    0.31919267  ]    #         p_Lt   p_T   p_G    p_S# value   0.00   0.44  0.38   0.21pd.Series(log_likelihood).plot()plt.show()# PART 2: ESTIMATED KNOWLEDGE STATE WITH BKT MECHANISMbkt_learned_state_column = np.array([])bkt_parameter = {'p_Lt': [],                 'p_T': [],                 'p_G': [],                 'p_S': []}for sid in student_list:    # PART EM    scores = df[df['student_ID'] == sid]['score'].astype(int).to_list()    # PART 2    p_Lt = pi[1]    p_T = A[0][1]    p_G = B[0][1]    p_S = B[1][0]    bkt_parameter['p_Lt'] = np.append(bkt_parameter['p_Lt'], p_Lt)    bkt_parameter['p_T'] = np.append(bkt_parameter['p_T'], p_T)    bkt_parameter['p_G'] = np.append(bkt_parameter['p_G'], p_G)    bkt_parameter['p_S'] = np.append(bkt_parameter['p_S'], p_S)        learn_threshold = 0.95        bm = BKTModel(p_Lt, p_T, p_G, p_S, scores, learn_threshold)    bm.get_p_L()    bkt_learned_state_column = np.append(bkt_learned_state_column,                                          np.array(bm.p_L_array)                                         )df['bkt_state_index'] = (bkt_learned_state_column >= learn_threshold).astype(int)